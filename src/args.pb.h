// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: args.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_args_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_args_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_args_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_args_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_args_2eproto;
namespace cherry {
class LogEntry;
class LogEntryDefaultTypeInternal;
extern LogEntryDefaultTypeInternal _LogEntry_default_instance_;
class RequestAppendArgs;
class RequestAppendArgsDefaultTypeInternal;
extern RequestAppendArgsDefaultTypeInternal _RequestAppendArgs_default_instance_;
class RequestAppendReply;
class RequestAppendReplyDefaultTypeInternal;
extern RequestAppendReplyDefaultTypeInternal _RequestAppendReply_default_instance_;
class RequestVoteArgs;
class RequestVoteArgsDefaultTypeInternal;
extern RequestVoteArgsDefaultTypeInternal _RequestVoteArgs_default_instance_;
class RequestVoteReply;
class RequestVoteReplyDefaultTypeInternal;
extern RequestVoteReplyDefaultTypeInternal _RequestVoteReply_default_instance_;
}  // namespace cherry
PROTOBUF_NAMESPACE_OPEN
template<> ::cherry::LogEntry* Arena::CreateMaybeMessage<::cherry::LogEntry>(Arena*);
template<> ::cherry::RequestAppendArgs* Arena::CreateMaybeMessage<::cherry::RequestAppendArgs>(Arena*);
template<> ::cherry::RequestAppendReply* Arena::CreateMaybeMessage<::cherry::RequestAppendReply>(Arena*);
template<> ::cherry::RequestVoteArgs* Arena::CreateMaybeMessage<::cherry::RequestVoteArgs>(Arena*);
template<> ::cherry::RequestVoteReply* Arena::CreateMaybeMessage<::cherry::RequestVoteReply>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace cherry {

// ===================================================================

class RequestVoteArgs :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cherry.RequestVoteArgs) */ {
 public:
  RequestVoteArgs();
  virtual ~RequestVoteArgs();

  RequestVoteArgs(const RequestVoteArgs& from);
  RequestVoteArgs(RequestVoteArgs&& from) noexcept
    : RequestVoteArgs() {
    *this = ::std::move(from);
  }

  inline RequestVoteArgs& operator=(const RequestVoteArgs& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestVoteArgs& operator=(RequestVoteArgs&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RequestVoteArgs& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RequestVoteArgs* internal_default_instance() {
    return reinterpret_cast<const RequestVoteArgs*>(
               &_RequestVoteArgs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RequestVoteArgs& a, RequestVoteArgs& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestVoteArgs* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RequestVoteArgs* New() const final {
    return CreateMaybeMessage<RequestVoteArgs>(nullptr);
  }

  RequestVoteArgs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RequestVoteArgs>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RequestVoteArgs& from);
  void MergeFrom(const RequestVoteArgs& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestVoteArgs* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cherry.RequestVoteArgs";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_args_2eproto);
    return ::descriptor_table_args_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTermFieldNumber = 1,
    kCandidateIdFieldNumber = 2,
    kLastLogIndexFieldNumber = 3,
    kLastLogTermFieldNumber = 4,
  };
  // required uint32 term = 1;
  bool has_term() const;
  void clear_term();
  ::PROTOBUF_NAMESPACE_ID::uint32 term() const;
  void set_term(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // required int32 candidate_id = 2;
  bool has_candidate_id() const;
  void clear_candidate_id();
  ::PROTOBUF_NAMESPACE_ID::int32 candidate_id() const;
  void set_candidate_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // required uint32 last_log_index = 3;
  bool has_last_log_index() const;
  void clear_last_log_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 last_log_index() const;
  void set_last_log_index(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // required uint32 last_log_term = 4;
  bool has_last_log_term() const;
  void clear_last_log_term();
  ::PROTOBUF_NAMESPACE_ID::uint32 last_log_term() const;
  void set_last_log_term(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:cherry.RequestVoteArgs)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 term_;
  ::PROTOBUF_NAMESPACE_ID::int32 candidate_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 last_log_index_;
  ::PROTOBUF_NAMESPACE_ID::uint32 last_log_term_;
  friend struct ::TableStruct_args_2eproto;
};
// -------------------------------------------------------------------

class RequestVoteReply :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cherry.RequestVoteReply) */ {
 public:
  RequestVoteReply();
  virtual ~RequestVoteReply();

  RequestVoteReply(const RequestVoteReply& from);
  RequestVoteReply(RequestVoteReply&& from) noexcept
    : RequestVoteReply() {
    *this = ::std::move(from);
  }

  inline RequestVoteReply& operator=(const RequestVoteReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestVoteReply& operator=(RequestVoteReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RequestVoteReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RequestVoteReply* internal_default_instance() {
    return reinterpret_cast<const RequestVoteReply*>(
               &_RequestVoteReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RequestVoteReply& a, RequestVoteReply& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestVoteReply* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RequestVoteReply* New() const final {
    return CreateMaybeMessage<RequestVoteReply>(nullptr);
  }

  RequestVoteReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RequestVoteReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RequestVoteReply& from);
  void MergeFrom(const RequestVoteReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestVoteReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cherry.RequestVoteReply";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_args_2eproto);
    return ::descriptor_table_args_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTermFieldNumber = 1,
    kVoteGrantedFieldNumber = 2,
  };
  // required uint32 term = 1;
  bool has_term() const;
  void clear_term();
  ::PROTOBUF_NAMESPACE_ID::uint32 term() const;
  void set_term(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // required bool vote_granted = 2;
  bool has_vote_granted() const;
  void clear_vote_granted();
  bool vote_granted() const;
  void set_vote_granted(bool value);

  // @@protoc_insertion_point(class_scope:cherry.RequestVoteReply)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 term_;
  bool vote_granted_;
  friend struct ::TableStruct_args_2eproto;
};
// -------------------------------------------------------------------

class LogEntry :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cherry.LogEntry) */ {
 public:
  LogEntry();
  virtual ~LogEntry();

  LogEntry(const LogEntry& from);
  LogEntry(LogEntry&& from) noexcept
    : LogEntry() {
    *this = ::std::move(from);
  }

  inline LogEntry& operator=(const LogEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogEntry& operator=(LogEntry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LogEntry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogEntry* internal_default_instance() {
    return reinterpret_cast<const LogEntry*>(
               &_LogEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(LogEntry& a, LogEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(LogEntry* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LogEntry* New() const final {
    return CreateMaybeMessage<LogEntry>(nullptr);
  }

  LogEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LogEntry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LogEntry& from);
  void MergeFrom(const LogEntry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogEntry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cherry.LogEntry";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_args_2eproto);
    return ::descriptor_table_args_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 3,
    kTermFieldNumber = 1,
    kIndexFieldNumber = 2,
  };
  // required bytes command = 3;
  bool has_command() const;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const void* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);

  // required uint32 term = 1;
  bool has_term() const;
  void clear_term();
  ::PROTOBUF_NAMESPACE_ID::uint32 term() const;
  void set_term(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // required uint32 index = 2;
  bool has_index() const;
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:cherry.LogEntry)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::uint32 term_;
  ::PROTOBUF_NAMESPACE_ID::uint32 index_;
  friend struct ::TableStruct_args_2eproto;
};
// -------------------------------------------------------------------

class RequestAppendArgs :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cherry.RequestAppendArgs) */ {
 public:
  RequestAppendArgs();
  virtual ~RequestAppendArgs();

  RequestAppendArgs(const RequestAppendArgs& from);
  RequestAppendArgs(RequestAppendArgs&& from) noexcept
    : RequestAppendArgs() {
    *this = ::std::move(from);
  }

  inline RequestAppendArgs& operator=(const RequestAppendArgs& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestAppendArgs& operator=(RequestAppendArgs&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RequestAppendArgs& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RequestAppendArgs* internal_default_instance() {
    return reinterpret_cast<const RequestAppendArgs*>(
               &_RequestAppendArgs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RequestAppendArgs& a, RequestAppendArgs& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestAppendArgs* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RequestAppendArgs* New() const final {
    return CreateMaybeMessage<RequestAppendArgs>(nullptr);
  }

  RequestAppendArgs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RequestAppendArgs>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RequestAppendArgs& from);
  void MergeFrom(const RequestAppendArgs& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestAppendArgs* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cherry.RequestAppendArgs";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_args_2eproto);
    return ::descriptor_table_args_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntriesFieldNumber = 6,
    kTermFieldNumber = 1,
    kLeaderIdFieldNumber = 2,
    kPreLogIndexFieldNumber = 3,
    kPreLogTermFieldNumber = 4,
    kLeaderCommitFieldNumber = 5,
  };
  // required .cherry.LogEntry entries = 6;
  bool has_entries() const;
  void clear_entries();
  const ::cherry::LogEntry& entries() const;
  ::cherry::LogEntry* release_entries();
  ::cherry::LogEntry* mutable_entries();
  void set_allocated_entries(::cherry::LogEntry* entries);

  // required uint32 term = 1;
  bool has_term() const;
  void clear_term();
  ::PROTOBUF_NAMESPACE_ID::uint32 term() const;
  void set_term(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // required int32 leader_id = 2;
  bool has_leader_id() const;
  void clear_leader_id();
  ::PROTOBUF_NAMESPACE_ID::int32 leader_id() const;
  void set_leader_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // required uint32 pre_log_index = 3;
  bool has_pre_log_index() const;
  void clear_pre_log_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 pre_log_index() const;
  void set_pre_log_index(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // required uint32 pre_log_term = 4;
  bool has_pre_log_term() const;
  void clear_pre_log_term();
  ::PROTOBUF_NAMESPACE_ID::uint32 pre_log_term() const;
  void set_pre_log_term(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // required uint32 leader_commit = 5;
  bool has_leader_commit() const;
  void clear_leader_commit();
  ::PROTOBUF_NAMESPACE_ID::uint32 leader_commit() const;
  void set_leader_commit(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:cherry.RequestAppendArgs)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::cherry::LogEntry* entries_;
  ::PROTOBUF_NAMESPACE_ID::uint32 term_;
  ::PROTOBUF_NAMESPACE_ID::int32 leader_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pre_log_index_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pre_log_term_;
  ::PROTOBUF_NAMESPACE_ID::uint32 leader_commit_;
  friend struct ::TableStruct_args_2eproto;
};
// -------------------------------------------------------------------

class RequestAppendReply :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cherry.RequestAppendReply) */ {
 public:
  RequestAppendReply();
  virtual ~RequestAppendReply();

  RequestAppendReply(const RequestAppendReply& from);
  RequestAppendReply(RequestAppendReply&& from) noexcept
    : RequestAppendReply() {
    *this = ::std::move(from);
  }

  inline RequestAppendReply& operator=(const RequestAppendReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestAppendReply& operator=(RequestAppendReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RequestAppendReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RequestAppendReply* internal_default_instance() {
    return reinterpret_cast<const RequestAppendReply*>(
               &_RequestAppendReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RequestAppendReply& a, RequestAppendReply& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestAppendReply* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RequestAppendReply* New() const final {
    return CreateMaybeMessage<RequestAppendReply>(nullptr);
  }

  RequestAppendReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RequestAppendReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RequestAppendReply& from);
  void MergeFrom(const RequestAppendReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestAppendReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cherry.RequestAppendReply";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_args_2eproto);
    return ::descriptor_table_args_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTermFieldNumber = 1,
    kSuccessFieldNumber = 2,
  };
  // required uint32 term = 1;
  bool has_term() const;
  void clear_term();
  ::PROTOBUF_NAMESPACE_ID::uint32 term() const;
  void set_term(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // required bool success = 2;
  bool has_success() const;
  void clear_success();
  bool success() const;
  void set_success(bool value);

  // @@protoc_insertion_point(class_scope:cherry.RequestAppendReply)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 term_;
  bool success_;
  friend struct ::TableStruct_args_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RequestVoteArgs

// required uint32 term = 1;
inline bool RequestVoteArgs::has_term() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RequestVoteArgs::clear_term() {
  term_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RequestVoteArgs::term() const {
  // @@protoc_insertion_point(field_get:cherry.RequestVoteArgs.term)
  return term_;
}
inline void RequestVoteArgs::set_term(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  term_ = value;
  // @@protoc_insertion_point(field_set:cherry.RequestVoteArgs.term)
}

// required int32 candidate_id = 2;
inline bool RequestVoteArgs::has_candidate_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RequestVoteArgs::clear_candidate_id() {
  candidate_id_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RequestVoteArgs::candidate_id() const {
  // @@protoc_insertion_point(field_get:cherry.RequestVoteArgs.candidate_id)
  return candidate_id_;
}
inline void RequestVoteArgs::set_candidate_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  candidate_id_ = value;
  // @@protoc_insertion_point(field_set:cherry.RequestVoteArgs.candidate_id)
}

// required uint32 last_log_index = 3;
inline bool RequestVoteArgs::has_last_log_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RequestVoteArgs::clear_last_log_index() {
  last_log_index_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RequestVoteArgs::last_log_index() const {
  // @@protoc_insertion_point(field_get:cherry.RequestVoteArgs.last_log_index)
  return last_log_index_;
}
inline void RequestVoteArgs::set_last_log_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  last_log_index_ = value;
  // @@protoc_insertion_point(field_set:cherry.RequestVoteArgs.last_log_index)
}

// required uint32 last_log_term = 4;
inline bool RequestVoteArgs::has_last_log_term() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RequestVoteArgs::clear_last_log_term() {
  last_log_term_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RequestVoteArgs::last_log_term() const {
  // @@protoc_insertion_point(field_get:cherry.RequestVoteArgs.last_log_term)
  return last_log_term_;
}
inline void RequestVoteArgs::set_last_log_term(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  last_log_term_ = value;
  // @@protoc_insertion_point(field_set:cherry.RequestVoteArgs.last_log_term)
}

// -------------------------------------------------------------------

// RequestVoteReply

// required uint32 term = 1;
inline bool RequestVoteReply::has_term() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RequestVoteReply::clear_term() {
  term_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RequestVoteReply::term() const {
  // @@protoc_insertion_point(field_get:cherry.RequestVoteReply.term)
  return term_;
}
inline void RequestVoteReply::set_term(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  term_ = value;
  // @@protoc_insertion_point(field_set:cherry.RequestVoteReply.term)
}

// required bool vote_granted = 2;
inline bool RequestVoteReply::has_vote_granted() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RequestVoteReply::clear_vote_granted() {
  vote_granted_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool RequestVoteReply::vote_granted() const {
  // @@protoc_insertion_point(field_get:cherry.RequestVoteReply.vote_granted)
  return vote_granted_;
}
inline void RequestVoteReply::set_vote_granted(bool value) {
  _has_bits_[0] |= 0x00000002u;
  vote_granted_ = value;
  // @@protoc_insertion_point(field_set:cherry.RequestVoteReply.vote_granted)
}

// -------------------------------------------------------------------

// LogEntry

// required uint32 term = 1;
inline bool LogEntry::has_term() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LogEntry::clear_term() {
  term_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LogEntry::term() const {
  // @@protoc_insertion_point(field_get:cherry.LogEntry.term)
  return term_;
}
inline void LogEntry::set_term(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  term_ = value;
  // @@protoc_insertion_point(field_set:cherry.LogEntry.term)
}

// required uint32 index = 2;
inline bool LogEntry::has_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LogEntry::clear_index() {
  index_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LogEntry::index() const {
  // @@protoc_insertion_point(field_get:cherry.LogEntry.index)
  return index_;
}
inline void LogEntry::set_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  index_ = value;
  // @@protoc_insertion_point(field_set:cherry.LogEntry.index)
}

// required bytes command = 3;
inline bool LogEntry::has_command() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LogEntry::clear_command() {
  command_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LogEntry::command() const {
  // @@protoc_insertion_point(field_get:cherry.LogEntry.command)
  return command_.GetNoArena();
}
inline void LogEntry::set_command(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  command_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cherry.LogEntry.command)
}
inline void LogEntry::set_command(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  command_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cherry.LogEntry.command)
}
inline void LogEntry::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  command_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cherry.LogEntry.command)
}
inline void LogEntry::set_command(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  command_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cherry.LogEntry.command)
}
inline std::string* LogEntry::mutable_command() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:cherry.LogEntry.command)
  return command_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LogEntry::release_command() {
  // @@protoc_insertion_point(field_release:cherry.LogEntry.command)
  if (!has_command()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return command_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LogEntry::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  command_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command);
  // @@protoc_insertion_point(field_set_allocated:cherry.LogEntry.command)
}

// -------------------------------------------------------------------

// RequestAppendArgs

// required uint32 term = 1;
inline bool RequestAppendArgs::has_term() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RequestAppendArgs::clear_term() {
  term_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RequestAppendArgs::term() const {
  // @@protoc_insertion_point(field_get:cherry.RequestAppendArgs.term)
  return term_;
}
inline void RequestAppendArgs::set_term(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  term_ = value;
  // @@protoc_insertion_point(field_set:cherry.RequestAppendArgs.term)
}

// required int32 leader_id = 2;
inline bool RequestAppendArgs::has_leader_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RequestAppendArgs::clear_leader_id() {
  leader_id_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RequestAppendArgs::leader_id() const {
  // @@protoc_insertion_point(field_get:cherry.RequestAppendArgs.leader_id)
  return leader_id_;
}
inline void RequestAppendArgs::set_leader_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  leader_id_ = value;
  // @@protoc_insertion_point(field_set:cherry.RequestAppendArgs.leader_id)
}

// required uint32 pre_log_index = 3;
inline bool RequestAppendArgs::has_pre_log_index() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RequestAppendArgs::clear_pre_log_index() {
  pre_log_index_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RequestAppendArgs::pre_log_index() const {
  // @@protoc_insertion_point(field_get:cherry.RequestAppendArgs.pre_log_index)
  return pre_log_index_;
}
inline void RequestAppendArgs::set_pre_log_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  pre_log_index_ = value;
  // @@protoc_insertion_point(field_set:cherry.RequestAppendArgs.pre_log_index)
}

// required uint32 pre_log_term = 4;
inline bool RequestAppendArgs::has_pre_log_term() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RequestAppendArgs::clear_pre_log_term() {
  pre_log_term_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RequestAppendArgs::pre_log_term() const {
  // @@protoc_insertion_point(field_get:cherry.RequestAppendArgs.pre_log_term)
  return pre_log_term_;
}
inline void RequestAppendArgs::set_pre_log_term(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  pre_log_term_ = value;
  // @@protoc_insertion_point(field_set:cherry.RequestAppendArgs.pre_log_term)
}

// required uint32 leader_commit = 5;
inline bool RequestAppendArgs::has_leader_commit() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RequestAppendArgs::clear_leader_commit() {
  leader_commit_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RequestAppendArgs::leader_commit() const {
  // @@protoc_insertion_point(field_get:cherry.RequestAppendArgs.leader_commit)
  return leader_commit_;
}
inline void RequestAppendArgs::set_leader_commit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  leader_commit_ = value;
  // @@protoc_insertion_point(field_set:cherry.RequestAppendArgs.leader_commit)
}

// required .cherry.LogEntry entries = 6;
inline bool RequestAppendArgs::has_entries() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RequestAppendArgs::clear_entries() {
  if (entries_ != nullptr) entries_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::cherry::LogEntry& RequestAppendArgs::entries() const {
  const ::cherry::LogEntry* p = entries_;
  // @@protoc_insertion_point(field_get:cherry.RequestAppendArgs.entries)
  return p != nullptr ? *p : *reinterpret_cast<const ::cherry::LogEntry*>(
      &::cherry::_LogEntry_default_instance_);
}
inline ::cherry::LogEntry* RequestAppendArgs::release_entries() {
  // @@protoc_insertion_point(field_release:cherry.RequestAppendArgs.entries)
  _has_bits_[0] &= ~0x00000001u;
  ::cherry::LogEntry* temp = entries_;
  entries_ = nullptr;
  return temp;
}
inline ::cherry::LogEntry* RequestAppendArgs::mutable_entries() {
  _has_bits_[0] |= 0x00000001u;
  if (entries_ == nullptr) {
    auto* p = CreateMaybeMessage<::cherry::LogEntry>(GetArenaNoVirtual());
    entries_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cherry.RequestAppendArgs.entries)
  return entries_;
}
inline void RequestAppendArgs::set_allocated_entries(::cherry::LogEntry* entries) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete entries_;
  }
  if (entries) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      entries = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, entries, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  entries_ = entries;
  // @@protoc_insertion_point(field_set_allocated:cherry.RequestAppendArgs.entries)
}

// -------------------------------------------------------------------

// RequestAppendReply

// required uint32 term = 1;
inline bool RequestAppendReply::has_term() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RequestAppendReply::clear_term() {
  term_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RequestAppendReply::term() const {
  // @@protoc_insertion_point(field_get:cherry.RequestAppendReply.term)
  return term_;
}
inline void RequestAppendReply::set_term(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  term_ = value;
  // @@protoc_insertion_point(field_set:cherry.RequestAppendReply.term)
}

// required bool success = 2;
inline bool RequestAppendReply::has_success() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RequestAppendReply::clear_success() {
  success_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool RequestAppendReply::success() const {
  // @@protoc_insertion_point(field_get:cherry.RequestAppendReply.success)
  return success_;
}
inline void RequestAppendReply::set_success(bool value) {
  _has_bits_[0] |= 0x00000002u;
  success_ = value;
  // @@protoc_insertion_point(field_set:cherry.RequestAppendReply.success)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace cherry

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_args_2eproto
